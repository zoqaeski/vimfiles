" Settings for FZF
" ================

nmap <Space> [fzf-p]
xmap <Space> [fzf-p]

nnoremap [fzf-p] <nop>
xnoremap [fzf-p] <nop>

nnoremap <silent> [fzf-p]a     :<C-u>FzfPreviewDirectoryFiles<CR>
nnoremap <silent> [fzf-p]d     :<C-u>FzfPreviewDirectoryFiles<CR>
nnoremap <silent> [fzf-p]f     :<C-u>FzfPreviewDirectoryFiles ~<CR>
nnoremap          [fzf-p]<s-f> :<C-u>FzfPreviewDirectoryFiles<Space>
nnoremap <silent> [fzf-p]r     :<C-u>FzfPreviewMruFiles<CR>

nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffers<CR>
nnoremap <silent> [fzf-p]<s-b> :<C-u>FzfPreviewAllBuffers<CR>

nnoremap <silent> [fzf-p]o     :<C-u>FzfPreviewFromResources buffer project_mru<CR>
nnoremap <silent> [fzf-p]p     :<C-u>FzfPreviewFromResources project_mru git<CR>

nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatus<CR>
nnoremap <silent> [fzf-p]ga    :<C-u>FzfPreviewGitActions<CR>
nnoremap <silent> [fzf-p]<C-o> :<C-u>FzfPreviewJumps<CR>
nnoremap <silent> [fzf-p]g;    :<C-u>FzfPreviewChanges<CR>
nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>

nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrep<Space>
xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"

nnoremap <silent> [fzf-p]t     :<C-u>FzfPreviewBufferTags<CR>

nnoremap <silent> [fzf-p]q     :<C-u>FzfPreviewQuickFix<CR>
nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationList<CR>

" Default options are commented

" " Floating window size ratio
" let g:fzf_preview_floating_window_rate = 0.9

" " fzf window position settings
" let g:fzf_preview_direct_window_option = ''

" " fzf command default options
" let g:fzf_preview_default_fzf_options = { '--reverse': v:true, '--preview-window': 'wrap' }

" " Add fzf quit mapping
" let g:fzf_preview_quit_map = 1

" " jump to the buffers by default, when possible
" let g:fzf_preview_buffers_jump = 0

" " Commands used for fzf preview.
" " The file name selected by fzf becomes {}
" let g:fzf_preview_command = 'cat'                               " Not installed bat
" " let g:fzf_preview_command = 'bat --color=always --plain {-1}' " Installed bat

" " g:fzf_binary_preview_command is executed if this command succeeds, and g:fzf_preview_command is executed if it fails
" let g:fzf_preview_if_binary_command = '[[ "$(file --mime {})" =~ binary ]]'

" " Commands used for binary file
" let g:fzf_binary_preview_command = 'echo "{} is a binary file"'

" " Commands used to get the file list from project
" let g:fzf_preview_filelist_command = 'git ls-files --exclude-standard'               " Not Installed ripgrep
" " let g:fzf_preview_filelist_command = 'rg --files --hidden --follow --no-messages -g \!"* *"' " Installed ripgrep

" " Commands used to get the file list from git repository
" let g:fzf_preview_git_files_command = 'git ls-files --exclude-standard'

" " Commands used to get the file list from current directory
" let g:fzf_preview_directory_files_command = 'rg --files --hidden --follow --no-messages -g \!"* *"'

" " Commands used to get the git status file list
" let g:fzf_preview_git_status_command = 'git -c color.status=always status --short --untracked-files=all'

" " Commands used for git status preview.
" let g:fzf_preview_git_status_preview_command =  "[[ $(git diff --cached -- {-1}) != \"\" ]] && git diff --cached --color=always -- {-1} || " .
" \ "[[ $(git diff -- {-1}) != \"\" ]] && git diff --color=always -- {-1} || " .
" \ g:fzf_preview_command

" " Commands used for project grep
" let g:fzf_preview_grep_cmd = 'rg --line-number --no-heading --color=never'

" " MRU and MRW cache directory
" let g:fzf_preview_cache_directory = expand('~/.cache/vim/fzf_preview')

" " If this value is not 0, disable mru and mrw
" let g:fzf_preview_disable_mru = 0

" " Limit of the number of files to be saved by mru
" let g:fzf_preview_mru_limit = 1000

" " Commands used for current file lines
" let g:fzf_preview_lines_command = 'cat -n'                                " Not Installed bat
" " let g:fzf_preview_lines_command = 'bat --color=always --plain --number' " Installed bat

" " Cache directory for mru and mrw
" let g:fzf_preview_cache_directory = expand('~/.cache/vim/fzf_preview')

" " Keyboard shortcuts while fzf preview is active
" let g:fzf_preview_preview_key_bindings = ''
" " let g:fzf_preview_preview_key_bindings = 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'

" " Specify the color of fzf
" let g:fzf_preview_fzf_color_option = ''

" " Set the processes when selecting an element with fzf
" let g:fzf_preview_custom_processes = {}
" " For example, set split to ctrl-i
" " let g:fzf_preview_custom_processes['open-file'] = fzf_preview#remote#process#get_default_processes('open-file')
" " " let g:fzf_preview_custom_processes['open-file'] = fzf_preview#remote#process#get_default_processes('open-file', 'coc')
" " let g:fzf_preview_custom_processes['open-file']['ctrl-i'] = g:fzf_preview_custom_processes['open-file']['ctrl-x']
" " call remove(g:fzf_preview_custom_processes['open-file'], 'ctrl-x')

" " Use as fzf preview-window option
" let g:fzf_preview_fzf_preview_window_option = ''
" " let g:fzf_preview_fzf_preview_window_option = 'up:30%'

" vim: ft=vim fdm=marker ts=2 sts=2 sw=2 fdl=0 :
